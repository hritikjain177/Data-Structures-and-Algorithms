    Q.1
    Given a string check if it is Pangram or not. 
    A pangram is a sentence containing every letter in the English Alphabet (either lowercase or uppercase or both).
    For example, we say the letter A is present in the string if either 'a' is present or 'A' is present.
    soln:
    //{ Driver Code Starts
//Initial template for C++

#include<bits/stdc++.h>
using namespace std;


// } Driver Code Ends
//User function template for C++

class Solution
{
  public:
    //Function to check if a string is Pangram or not.
    bool checkPangram (string &str) {
        // your code here
         bool visited[26] = {0};

        int n = str.length();

        if(n<26)

        return false;

        for(int i=0; i<n; i++){

            

             visited[tolower(str[i])-'a'] = true;

             visited[toupper(str[i])-'A'] = true;

        }

        for(int i=0; i<26; i++){

          if(visited[i] == false)

        return false;

        }

        return true;
    }

};

//{ Driver Code Starts.

// Driver Program to test above functions
int main()
{
    int t;
    cin>>t;
    cin.ignore(INT_MAX, '\n');
    while(t--){
        string str;
        getline(cin, str);
        Solution obj;
        if (obj.checkPangram(str) == true)
            cout<<1<<endl;
        else
            cout<<0<<endl;
    }
    return(0);
}

// }
 
Q.2 
Given an integer n. Return the nth row of the following look-and-say pattern.
1
11
21
1211
111221
Look-and-Say Pattern:

To generate a member of the sequence from the previous member, read off the digits of the previous member, counting the number of digits in groups of the same digit. For example:

1 is read off as "one 1" or 11.
11 is read off as "two 1s" or 21.
21 is read off as "one 2, then one 1" or 1211.
1211 is read off as "one 1, one 2, then two 1s" or 111221.
111221 is read off as "three 1s, two 2s, then one 1" or 312211.
Soln :
//{ Driver Code Starts
//Initial template for C++

#include<bits/stdc++.h> 
using namespace std;

// } Driver Code Ends
//User function template for C++

class Solution
{
  public:
    string lookandsay(int n) {
         string ans="1";

        if(n==1)

        return ans;

        for(int i=0;i<n-1;i++){

            string instr;

            int cnt=1;

        for(int j=0;j<ans.size();j++){

        if(ans[j]==ans[j+1]){

          cnt++;

        }

         else{

         instr+=to_string(cnt);

         instr+=ans[j];

         cnt=1;

      }

    }

        ans=instr;

        }

        return ans;
    }   
};

//{ Driver Code Starts.
int main() {
    int t;
    cin>>t;
    while(t--)
    {
        int n;
        cin>>n;
        Solution obj;
        cout<<obj.lookandsay(n)<<endl;
    }
    return 0;
}
// } 
